;; -*- mode: scheme; -*-
;; Egglab Copyright (C) 2013 Dave Griffiths
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(load "scm/butterfly/chromosome.jscm")
(load "scm/butterfly/gui.jscm")
(load "scm/butterfly/butterfly.jscm")

(define chromo
  (list
   (gene-normalise
    (list (allele "dennis-patch-on" 0.5)
          (allele "dennis-patch-off" 0.5)))
   (gene-normalise
    (list (allele "hw-rays-on" 0.5)
          (allele "hw-rays-off" 0.5)))
   (gene-normalise
    (list (allele "red-fw-band-on" 0.5)
          (allele "red-fw-band-off" 0.5)))
   (gene-normalise
    (list (allele "yellow-fw-band-on" 0.5)
          (allele "yellow-fw-band-off" 0.5)))
   (gene-normalise
    (list (allele "yellow-hw-bar-on" 0.5)
          (allele "yellow-hw-bar-off" 0.5)))
   ))

(define (expr-to-number expr)
  (+ 1 (parseInt
        (string-append
         (if (eq? (list-ref expr 0) "dennis-patch-on") "0" "1")
         (if (eq? (list-ref expr 1) "hw-rays-on") "0" "1")
         (if (eq? (list-ref expr 2) "red-fw-band-on") "0" "1")
         (if (eq? (list-ref expr 3) "yellow-fw-band-on") "0" "1")
         (if (eq? (list-ref expr 4) "yellow-hw-bar-on") "0" "1"))
        2)))

(define butterfly-list (build-list 30 (lambda (i) (butterfly (chromosome-express chromo)))))
(define test-tex (build-list 32 (lambda (i) (load-texture (+ "patterns/" (+ i 1) ".png")))))
(define bg-tex (load-texture "bg.png"))

(define (render)
  (set! butterfly-list (update-butterflies butterfly-list))
  (render-butterflies butterfly-list)
  (with-state
   (texture bg-tex)
   (translate (vector 0 0 -100))
   (scale (vector 100 100 100))
   (draw-cube)))

;; set the one shader
(shader blinn-vertex-shader
"
precision mediump float;
varying vec3 N;
varying vec3 P;
varying vec3 V;
varying vec3 L;
varying vec3 T;
uniform sampler2D texture;
void main() {
 gl_FragColor = texture2D(texture,vec2(T.s,T.t));
}
")

(define (clamp v min max)
  (cond
   ((< v min) min)
   ((> v max) max)
   (else v)))

(define flash 0)
(define energy 50)

(define (nightjar-intro c)
  (game-modify-mouse-hook
   (lambda (e c)
     (define found 0)
     (set! butterfly-list
           (filter
            (lambda (b)
              (let ((pos (butterfly-screen-pos b)))
                (cond ((and (zero? found)
                            (< (vdist (vector (game-mx c) (game-my c) 0) pos) 50))
                       (make-gobble (vx pos) (vy pos))
                       (set! energy (+ energy 5))
                       (set! flash 255)
                       (set! found 1)
                       (set! chromo (chromosome-remove-expression chromo (butterfly-expr b)))
                       #f) (else #t))))
            butterfly-list))
     c)
   (game-modify-render
    (lambda (ctx)

      (when (< (length butterfly-list) 30)
            (set! butterfly-list
                  (cons (butterfly (chromosome-express chromo))
                        butterfly-list)))

      (set! flash (* flash 0.9))
      (set! energy (clamp (- energy (* 10 (game-time-delta c))) 0 100))

      (draw-pie ctx 70 700 10 100 255 0 0)
      (draw-pie ctx 1100 700 energy 100 0 220 120)

      (when (> flash 10)
            (draw-flash ctx 1100 700
                        200
                        127 255 200 (/ flash 255)))

      (draw-chromosome ctx 50 50 chromo)

      (set! ctx.strokeStyle "#fff")

      ;;(for-each
      ;; (lambda (b)
      ;;   (let ((pos (butterfly-screen-pos b)))
      ;;     (ctx.beginPath)
      ;;     (ctx.arc (vx pos) (vy pos) 50 0 (* Math.PI 2) true)
      ;;     (ctx.closePath)
      ;;     (ctx.stroke)))
      ;; butterfly)

      (set! ctx.fillStyle "#fff")
      (set! ctx.font "normal 10pt gnuolane")

 ;     (wrap-text ctx
 ;                (string-append "Num butterflies: " (length butterfly-list))
 ;                -470 100 1000 1000)

      (draw-gobble ctx)
      )
    (game-modify-buttons
     (list
;      (image-button
;       "" 80 100 "none" (find-image "plus.png")
;       (lambda (c)
;         (set! butterfly-list (cons (butterfly) butterfly-list))
;         c))

;      (image-button
;       "" 50 100 "none" (find-image "minus.png")
;       (lambda (c)
;         (set! butterfly-list (cdr butterfly-list))
;         c))


      )
     c))))




(every-frame (render))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; startup

(load-images!
 (append
  (list
   "heliconius.png"
   "plus.png"
   "minus.png"))
 (lambda ()
   (start-game canvas ctx)))
