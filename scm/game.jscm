;; -*- mode: scheme; -*-
;; Egglab Copyright (C) 2013 Dave Griffiths
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(load "scm/butterfly/chromosome.jscm")
(load "scm/butterfly/gui.jscm")
(load "scm/butterfly/butterfly.jscm")

(define model
  (list
   (gene-normalise
    (list (allele "dennis-patch-on" 0.5)
          (allele "dennis-patch-off" 0.5)))
   (gene-normalise
    (list (allele "hw-rays-on" 0.5)
          (allele "hw-rays-off" 0.5)))
   (gene-normalise
    (list (allele "red-fw-band-on" 0.5)
          (allele "red-fw-band-off" 0.5)))
   (gene-normalise
    (list (allele "yellow-fw-band-on" 0.5)
          (allele "yellow-fw-band-off" 0.5)))
   (gene-normalise
    (list (allele "yellow-hw-bar-on" 0.5)
          (allele "yellow-hw-bar-off" 0.5)))
   ))

(define (expr-to-number expr)
  (parseInt
   (string-append
    (if (eq? (list-ref expr 0) "dennis-patch-on") "0" "1")
    (if (eq? (list-ref expr 1) "hw-rays-on") "0" "1")
    (if (eq? (list-ref expr 2) "red-fw-band-on") "0" "1")
    (if (eq? (list-ref expr 3) "yellow-fw-band-on") "0" "1")
    (if (eq? (list-ref expr 4) "yellow-hw-bar-on") "0" "1"))
   2))

(define pop-size 15)
(define butterfly-list ())
(define chromo ())
(define toxic-expr ())
(define test-tex (build-list 32 (lambda (i) (load-texture (+ "patterns/" (+ i 1) ".png")))))
(define bg-tex (load-texture "bg.png"))
(define title-tex (load-texture "title.png"))
(define flash 0)
(define toxic-flash 0)
(define health 50)
(define hint-dur 100)
(define hint-time 100)
(define score 0)
(define edible-score 0)
(define toxic-score 0)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; population stuff


(define (build-population)
  (set! chromo model)
  (set! toxic-expr (chromosome-express chromo))
  (set! butterfly-list
        (list
         (build-list pop-size (lambda (i) (butterfly (chromosome-express chromo))))
         (build-list pop-size (lambda (i) (butterfly toxic-expr))))))

(define (build-demo-population)
  (set! chromo model)
  (set! toxic-expr (chromosome-express chromo))
  (set! butterfly-list
        (list
         (build-list 15 (lambda (i)
                          (let ((i (* i (/ (* 2 3.141) 15))))
                            (demo-butterfly
                             toxic-expr
                             (vector 0 0 0)
                             (vector (sin i) (cos i) 0))))))))


(define (detect-hits butterfly-list c fn)
  ;; find closest index
  (let ((closest
         (index-foldl
          (lambda (i b r)
            (let ((pos (butterfly-screen-pos b)))
              (let ((dist (vdist (vector (game-mx c) (game-my c) 0) pos)))
                (if (< dist (car r))
                    (list dist i pos b) r))))
          (list 999999 -1 0 0)
          butterfly-list)))
    ;; if less than hit dist
    (cond
     ((< (car closest) 50)
      ;; remove it
      (fn (list-ref closest 3) (list-ref closest 2))
      (list #t (delete-n butterfly-list (cadr closest))))
     (else (list #f butterfly-list)))))


(define (detect-hits-butterflies butterfly-list c)
  (let ((edible (detect-hits
                 (list-ref butterfly-list 0) c
                 (lambda (b pos)
                   (make-gobble (vx pos) (vy pos) 0 255 0 0.05)
                   (set! health (+ health 5))
                   (set! flash 255)
                   (set! found 1)
                   (set! edible-score (+ edible-score 1))
                   (set! chromo (chromosome-remove-expression chromo (butterfly-expr b))))
                 )))
    (if (car edible) ;; edible hit detected
        (list (cadr edible) (list-ref butterfly-list 1))
        (list (list-ref butterfly-list 0)
              (cadr
               (detect-hits ;; search for toxic hits
                (list-ref butterfly-list 1) c
                (lambda (b pos)
                  (make-gobble (vx pos) (vy pos) 255 0 0 0.01)
                  (set! health (- health 15))
                  (set! toxic-flash 255)
                  (set! toxic-score (+ toxic-score 1))
                  (set! found 1))))))))

(define (replenish butterfly-list fn)
  (if (< (length butterfly-list) pop-size)
      (cons (butterfly (fn)) butterfly-list)
      butterfly-list))

(define (replenish-butterflies butterfly-list)
  (list
   (replenish (list-ref butterfly-list 0) (lambda () (chromosome-express chromo)))
   (replenish (list-ref butterfly-list 1) (lambda () toxic-expr))))



(define (render-intro)
;  (set! butterfly-list (map update-butterflies butterfly-list))
;  (for-each render-butterflies butterfly-list)

  (with-state
   (texture title-tex)
   (translate (vector 10 -4.5 0))
   (scale (vector 18 18 18))
   (render-big-butterfly))

  (with-state
   (texture bg-tex)
   (translate (vector 0 0 -100))
   (scale (vector 100 100 100))
   (draw-cube)))

(define (render-game)
  (set! butterfly-list (map update-butterflies butterfly-list))
  (for-each render-butterflies butterfly-list)

  (with-state
   (texture bg-tex)
   (translate (vector 0 0 -100))
   (scale (vector 100 100 100))
   (draw-cube)))


(define (clamp v min max)
  (cond
   ((< v min) min)
   ((> v max) max)   (else v)))


(define (nightjar-intro c)
  (every-frame (render-intro))
;;  (build-demo-population)
  (game-modify-mouse-hook
   (lambda (e c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "normal 40pt amatic")
      (wrap-text ctx "Heliconius Butterfly Wing Pattern Evolver" 0 400))
    (game-modify-buttons
     (list
      (image-button
       "PLAY!" 600 550 "jumpy" (find-image "button.png")
       (lambda (c)
         (set! health 50)
         (set! score 0)
         (set! hint-time 100)
         (set! edible-score 0)
         (set! toxic-score 0)
         (build-population)
         (nightjar-game c)))
      )
     c))))


(define (nightjar-game c)
  (every-frame (render-game))
  (game-modify-update
   (lambda (t c)
     (if (< health 1)
         (begin
           (msg "done!")
           (nightjar-game-over c))
         c))
  (game-modify-mouse-hook
   (lambda (e c)
     (when (eq? e "down")
           (set! butterfly-list (detect-hits-butterflies butterfly-list c)))
     c)
   (game-modify-render
    (lambda (ctx)

      (set! butterfly-list (replenish-butterflies butterfly-list))

      (set! flash (* flash 0.9))
      (set! toxic-flash (* toxic-flash 0.9))
      (set! health (clamp (- health (* 30 (game-time-delta c))) 0 100))
      (set! hint-time (+ hint-time 0.1))

      (draw-pie ctx 1100 700 health 100 0 220 120)

      (when (> flash 10)
            (draw-flash ctx 1100 700
                        200
                        0 255 0 (/ flash 255)))

      (when (> toxic-flash 10)
            (draw-flash ctx 1100 700
                        200
                        255 127 200 (/ toxic-flash 255)))


      (draw-chromosome ctx 50 50 chromo)
      (draw-expr ctx 50 350 toxic-expr)

      (set! ctx.strokeStyle "#fff")

      (when (and (< health 20) (< (modulo hint-time 2) 1))
            (set! ctx.font "bold 40pt amatic")
            (ctx.fillText "Health Is Low!" 600 400))

      (when (> hint-time hint-dur)
            (when (< (modulo hint-time 2) 1)
                  (for-each
                   (lambda (b)
                     (let ((pos (butterfly-screen-pos b)))
                       (set! ctx.strokeStyle "#f00")
                       (set! ctx.fillStyle "#f00")
                       (set! ctx.lineWidth 5)
                       (ctx.beginPath)
                       (ctx.arc (vx pos) (vy pos) 50 0 (* Math.PI 2) true)
                       (ctx.closePath)
                       (ctx.stroke)
                       (set! ctx.font "bold 40pt amatic")
                       (ctx.fillText "TOXIC!!" (- (vx pos) 50) (- (vy pos) 60))
                       ))
                   (list-ref butterfly-list 1)))
            (when (> hint-time (+ hint-dur 20)) (set! hint-time 0)))

      (set! ctx.fillStyle "#fff")
      (set! ctx.font "normal 10pt amatic")

 ;     (wrap-text ctx
 ;                (string-append "Num butterflies: " (length butterfly-list))
 ;                -470 100 1000 1000)

      (draw-gobble ctx)
      )
    (game-modify-buttons
     (list
;      (image-button
;       "" 80 100 "none" (find-image "plus.png")
;       (lambda (c)
;         (set! butterfly-list (cons (butterfly) butterfly-list))
;         c))

;      (image-button
;       "" 50 100 "none" (find-image "minus.png")
;       (lambda (c)
;         (set! butterfly-list (cdr butterfly-list))
;         c))


      )
     c)))))

(define (nightjar-game-over c)
  (game-modify-update
   (lambda (t c) c)
   (game-modify-mouse-hook
    (lambda (e c) c)
    (game-modify-render
     (lambda (ctx)
      (set! ctx.font "normal 40pt amatic")
      (wrap-text ctx "Game Over" 0 340)
      (set! ctx.font "bold 40pt amatic")
      (wrap-text ctx (string-append "You ate " edible-score " edible butterflies and " toxic-score " toxic butterflies.") 0 400)
      (set! ctx.font "normal 40pt amatic"))
     (game-modify-buttons
      (list
       (image-button
        "Done" 600 550 "jumpy" (find-image "button.png")
        (lambda (c)
          (nightjar-intro c)))
       )
      c)))))






;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; startup
(set! ctx.font "normal 10pt amatic")

(load-images!
 (append
  (list
   "heliconius.png"
   "button.png"))
 (lambda ()
   (start-game canvas ctx)))
